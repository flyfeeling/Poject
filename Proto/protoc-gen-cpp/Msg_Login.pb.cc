// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Msg_Login.proto

#include "Msg_Login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class CheckVersionReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckVersionReq>
      _instance;
} _CheckVersionReq_default_instance_;
class CheckVersionAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckVersionAck>
      _instance;
} _CheckVersionAck_default_instance_;
class ClientServerListReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientServerListReq>
      _instance;
} _ClientServerListReq_default_instance_;
class ClientServerNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientServerNode>
      _instance;
} _ClientServerNode_default_instance_;
class ClientServerListAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientServerListAck>
      _instance;
} _ClientServerListAck_default_instance_;
class SelectServerReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SelectServerReq>
      _instance;
} _SelectServerReq_default_instance_;
class SelectServerAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SelectServerAck>
      _instance;
} _SelectServerAck_default_instance_;
class LogicRegToLoginReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogicRegToLoginReq>
      _instance;
} _LogicRegToLoginReq_default_instance_;
class LogicRegToLoginAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogicRegToLoginAck>
      _instance;
} _LogicRegToLoginAck_default_instance_;
namespace protobuf_Msg_5fLogin_2eproto {
void InitDefaultsCheckVersionReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::_CheckVersionReq_default_instance_;
    new (ptr) ::CheckVersionReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CheckVersionReq::InitAsDefaultInstance();
}

void InitDefaultsCheckVersionReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCheckVersionReqImpl);
}

void InitDefaultsCheckVersionAckImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::_CheckVersionAck_default_instance_;
    new (ptr) ::CheckVersionAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CheckVersionAck::InitAsDefaultInstance();
}

void InitDefaultsCheckVersionAck() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCheckVersionAckImpl);
}

void InitDefaultsClientServerListReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::_ClientServerListReq_default_instance_;
    new (ptr) ::ClientServerListReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientServerListReq::InitAsDefaultInstance();
}

void InitDefaultsClientServerListReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsClientServerListReqImpl);
}

void InitDefaultsClientServerNodeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::_ClientServerNode_default_instance_;
    new (ptr) ::ClientServerNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientServerNode::InitAsDefaultInstance();
}

void InitDefaultsClientServerNode() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsClientServerNodeImpl);
}

void InitDefaultsClientServerListAckImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  protobuf_Msg_5fLogin_2eproto::InitDefaultsClientServerNode();
  {
    void* ptr = &::_ClientServerListAck_default_instance_;
    new (ptr) ::ClientServerListAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientServerListAck::InitAsDefaultInstance();
}

void InitDefaultsClientServerListAck() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsClientServerListAckImpl);
}

void InitDefaultsSelectServerReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::_SelectServerReq_default_instance_;
    new (ptr) ::SelectServerReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SelectServerReq::InitAsDefaultInstance();
}

void InitDefaultsSelectServerReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSelectServerReqImpl);
}

void InitDefaultsSelectServerAckImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::_SelectServerAck_default_instance_;
    new (ptr) ::SelectServerAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SelectServerAck::InitAsDefaultInstance();
}

void InitDefaultsSelectServerAck() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSelectServerAckImpl);
}

void InitDefaultsLogicRegToLoginReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::_LogicRegToLoginReq_default_instance_;
    new (ptr) ::LogicRegToLoginReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogicRegToLoginReq::InitAsDefaultInstance();
}

void InitDefaultsLogicRegToLoginReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLogicRegToLoginReqImpl);
}

void InitDefaultsLogicRegToLoginAckImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::_LogicRegToLoginAck_default_instance_;
    new (ptr) ::LogicRegToLoginAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogicRegToLoginAck::InitAsDefaultInstance();
}

void InitDefaultsLogicRegToLoginAck() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLogicRegToLoginAckImpl);
}

::google::protobuf::Metadata file_level_metadata[9];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CheckVersionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CheckVersionReq, clientverion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CheckVersionReq, channel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CheckVersionAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CheckVersionAck, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CheckVersionAck, clientverion_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ClientServerListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ClientServerListReq, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ClientServerListReq, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ClientServerListReq, clientversion_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ClientServerNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ClientServerNode, svrid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ClientServerNode, svrname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ClientServerNode, svrstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ClientServerNode, svrflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ClientServerNode, svropentime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ClientServerListAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ClientServerListAck, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ClientServerListAck, svrnode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SelectServerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SelectServerReq, serverid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SelectServerAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SelectServerAck, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SelectServerAck, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SelectServerAck, serveraddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SelectServerAck, serverport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SelectServerAck, logincode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LogicRegToLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LogicRegToLoginReq, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LogicRegToLoginReq, servername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LogicRegToLoginReq, serverip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LogicRegToLoginReq, serverport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LogicRegToLoginReq, httpport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LogicRegToLoginReq, watchport_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LogicRegToLoginAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LogicRegToLoginAck, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LogicRegToLoginAck, newsvrname_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CheckVersionReq)},
  { 7, -1, sizeof(::CheckVersionAck)},
  { 14, -1, sizeof(::ClientServerListReq)},
  { 22, -1, sizeof(::ClientServerNode)},
  { 32, -1, sizeof(::ClientServerListAck)},
  { 39, -1, sizeof(::SelectServerReq)},
  { 45, -1, sizeof(::SelectServerAck)},
  { 55, -1, sizeof(::LogicRegToLoginReq)},
  { 66, -1, sizeof(::LogicRegToLoginAck)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CheckVersionReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CheckVersionAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ClientServerListReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ClientServerNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ClientServerListAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SelectServerReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SelectServerAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_LogicRegToLoginReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_LogicRegToLoginAck_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Msg_Login.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017Msg_Login.proto\"8\n\017CheckVersionReq\022\024\n\014"
      "ClientVerion\030\001 \001(\t\022\017\n\007Channel\030\002 \001(\005\"8\n\017C"
      "heckVersionAck\022\017\n\007RetCode\030\001 \001(\r\022\024\n\014Clien"
      "tVerion\030\002 \001(\t\"P\n\023ClientServerListReq\022\021\n\t"
      "AccountID\030\001 \001(\004\022\017\n\007Channel\030\002 \001(\005\022\025\n\rClie"
      "ntVersion\030\003 \001(\t\"j\n\020ClientServerNode\022\r\n\005S"
      "vrID\030\001 \001(\005\022\017\n\007SvrName\030\002 \001(\t\022\020\n\010SvrState\030"
      "\003 \001(\005\022\017\n\007SvrFlag\030\004 \001(\005\022\023\n\013SvrOpenTime\030\005 "
      "\001(\005\"J\n\023ClientServerListAck\022\017\n\007RetCode\030\001 "
      "\001(\r\022\"\n\007SvrNode\030\002 \003(\0132\021.ClientServerNode\""
      "#\n\017SelectServerReq\022\020\n\010ServerID\030\001 \001(\005\"o\n\017"
      "SelectServerAck\022\017\n\007RetCode\030\001 \001(\r\022\020\n\010Serv"
      "erID\030\002 \001(\005\022\022\n\nServerAddr\030\003 \001(\t\022\022\n\nServer"
      "Port\030\004 \001(\005\022\021\n\tLoginCode\030\005 \001(\005\"\205\001\n\022LogicR"
      "egToLoginReq\022\020\n\010ServerID\030\001 \001(\005\022\022\n\nServer"
      "Name\030\002 \001(\t\022\020\n\010ServerIp\030\003 \001(\t\022\022\n\nServerPo"
      "rt\030\004 \001(\005\022\020\n\010HttpPort\030\005 \001(\005\022\021\n\tWatchPort\030"
      "\006 \001(\005\"9\n\022LogicRegToLoginAck\022\017\n\007RetCode\030\001"
      " \001(\r\022\022\n\nNewSvrName\030\002 \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 752);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Msg_Login.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Msg_5fLogin_2eproto

// ===================================================================

void CheckVersionReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckVersionReq::kClientVerionFieldNumber;
const int CheckVersionReq::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckVersionReq::CheckVersionReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Msg_5fLogin_2eproto::InitDefaultsCheckVersionReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CheckVersionReq)
}
CheckVersionReq::CheckVersionReq(const CheckVersionReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientverion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientverion().size() > 0) {
    clientverion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientverion_);
  }
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:CheckVersionReq)
}

void CheckVersionReq::SharedCtor() {
  clientverion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_ = 0;
  _cached_size_ = 0;
}

CheckVersionReq::~CheckVersionReq() {
  // @@protoc_insertion_point(destructor:CheckVersionReq)
  SharedDtor();
}

void CheckVersionReq::SharedDtor() {
  clientverion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CheckVersionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckVersionReq::descriptor() {
  ::protobuf_Msg_5fLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Msg_5fLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckVersionReq& CheckVersionReq::default_instance() {
  ::protobuf_Msg_5fLogin_2eproto::InitDefaultsCheckVersionReq();
  return *internal_default_instance();
}

CheckVersionReq* CheckVersionReq::New(::google::protobuf::Arena* arena) const {
  CheckVersionReq* n = new CheckVersionReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckVersionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CheckVersionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientverion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_ = 0;
  _internal_metadata_.Clear();
}

bool CheckVersionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CheckVersionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ClientVerion = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientverion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientverion().data(), static_cast<int>(this->clientverion().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CheckVersionReq.ClientVerion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Channel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CheckVersionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CheckVersionReq)
  return false;
#undef DO_
}

void CheckVersionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CheckVersionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ClientVerion = 1;
  if (this->clientverion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientverion().data(), static_cast<int>(this->clientverion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CheckVersionReq.ClientVerion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clientverion(), output);
  }

  // int32 Channel = 2;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CheckVersionReq)
}

::google::protobuf::uint8* CheckVersionReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CheckVersionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ClientVerion = 1;
  if (this->clientverion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientverion().data(), static_cast<int>(this->clientverion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CheckVersionReq.ClientVerion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientverion(), target);
  }

  // int32 Channel = 2;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CheckVersionReq)
  return target;
}

size_t CheckVersionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CheckVersionReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ClientVerion = 1;
  if (this->clientverion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientverion());
  }

  // int32 Channel = 2;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckVersionReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CheckVersionReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckVersionReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckVersionReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CheckVersionReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CheckVersionReq)
    MergeFrom(*source);
  }
}

void CheckVersionReq::MergeFrom(const CheckVersionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CheckVersionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientverion().size() > 0) {

    clientverion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientverion_);
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
}

void CheckVersionReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CheckVersionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckVersionReq::CopyFrom(const CheckVersionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CheckVersionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckVersionReq::IsInitialized() const {
  return true;
}

void CheckVersionReq::Swap(CheckVersionReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckVersionReq::InternalSwap(CheckVersionReq* other) {
  using std::swap;
  clientverion_.Swap(&other->clientverion_);
  swap(channel_, other->channel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckVersionReq::GetMetadata() const {
  protobuf_Msg_5fLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Msg_5fLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CheckVersionAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckVersionAck::kRetCodeFieldNumber;
const int CheckVersionAck::kClientVerionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckVersionAck::CheckVersionAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Msg_5fLogin_2eproto::InitDefaultsCheckVersionAck();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CheckVersionAck)
}
CheckVersionAck::CheckVersionAck(const CheckVersionAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientverion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientverion().size() > 0) {
    clientverion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientverion_);
  }
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:CheckVersionAck)
}

void CheckVersionAck::SharedCtor() {
  clientverion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  retcode_ = 0u;
  _cached_size_ = 0;
}

CheckVersionAck::~CheckVersionAck() {
  // @@protoc_insertion_point(destructor:CheckVersionAck)
  SharedDtor();
}

void CheckVersionAck::SharedDtor() {
  clientverion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CheckVersionAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckVersionAck::descriptor() {
  ::protobuf_Msg_5fLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Msg_5fLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckVersionAck& CheckVersionAck::default_instance() {
  ::protobuf_Msg_5fLogin_2eproto::InitDefaultsCheckVersionAck();
  return *internal_default_instance();
}

CheckVersionAck* CheckVersionAck::New(::google::protobuf::Arena* arena) const {
  CheckVersionAck* n = new CheckVersionAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckVersionAck::Clear() {
// @@protoc_insertion_point(message_clear_start:CheckVersionAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientverion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  retcode_ = 0u;
  _internal_metadata_.Clear();
}

bool CheckVersionAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CheckVersionAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 RetCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ClientVerion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientverion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientverion().data(), static_cast<int>(this->clientverion().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CheckVersionAck.ClientVerion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CheckVersionAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CheckVersionAck)
  return false;
#undef DO_
}

void CheckVersionAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CheckVersionAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // string ClientVerion = 2;
  if (this->clientverion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientverion().data(), static_cast<int>(this->clientverion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CheckVersionAck.ClientVerion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientverion(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CheckVersionAck)
}

::google::protobuf::uint8* CheckVersionAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CheckVersionAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // string ClientVerion = 2;
  if (this->clientverion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientverion().data(), static_cast<int>(this->clientverion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CheckVersionAck.ClientVerion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientverion(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CheckVersionAck)
  return target;
}

size_t CheckVersionAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CheckVersionAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ClientVerion = 2;
  if (this->clientverion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientverion());
  }

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckVersionAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CheckVersionAck)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckVersionAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckVersionAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CheckVersionAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CheckVersionAck)
    MergeFrom(*source);
  }
}

void CheckVersionAck::MergeFrom(const CheckVersionAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CheckVersionAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientverion().size() > 0) {

    clientverion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientverion_);
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void CheckVersionAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CheckVersionAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckVersionAck::CopyFrom(const CheckVersionAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CheckVersionAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckVersionAck::IsInitialized() const {
  return true;
}

void CheckVersionAck::Swap(CheckVersionAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckVersionAck::InternalSwap(CheckVersionAck* other) {
  using std::swap;
  clientverion_.Swap(&other->clientverion_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckVersionAck::GetMetadata() const {
  protobuf_Msg_5fLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Msg_5fLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientServerListReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientServerListReq::kAccountIDFieldNumber;
const int ClientServerListReq::kChannelFieldNumber;
const int ClientServerListReq::kClientVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientServerListReq::ClientServerListReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Msg_5fLogin_2eproto::InitDefaultsClientServerListReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientServerListReq)
}
ClientServerListReq::ClientServerListReq(const ClientServerListReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientversion().size() > 0) {
    clientversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientversion_);
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(channel_));
  // @@protoc_insertion_point(copy_constructor:ClientServerListReq)
}

void ClientServerListReq::SharedCtor() {
  clientversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(channel_));
  _cached_size_ = 0;
}

ClientServerListReq::~ClientServerListReq() {
  // @@protoc_insertion_point(destructor:ClientServerListReq)
  SharedDtor();
}

void ClientServerListReq::SharedDtor() {
  clientversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClientServerListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientServerListReq::descriptor() {
  ::protobuf_Msg_5fLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Msg_5fLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientServerListReq& ClientServerListReq::default_instance() {
  ::protobuf_Msg_5fLogin_2eproto::InitDefaultsClientServerListReq();
  return *internal_default_instance();
}

ClientServerListReq* ClientServerListReq::New(::google::protobuf::Arena* arena) const {
  ClientServerListReq* n = new ClientServerListReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientServerListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientServerListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(channel_));
  _internal_metadata_.Clear();
}

bool ClientServerListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientServerListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 AccountID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Channel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ClientVersion = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientversion().data(), static_cast<int>(this->clientversion().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ClientServerListReq.ClientVersion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientServerListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientServerListReq)
  return false;
#undef DO_
}

void ClientServerListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientServerListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 AccountID = 1;
  if (this->accountid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->accountid(), output);
  }

  // int32 Channel = 2;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // string ClientVersion = 3;
  if (this->clientversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientversion().data(), static_cast<int>(this->clientversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ClientServerListReq.ClientVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->clientversion(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientServerListReq)
}

::google::protobuf::uint8* ClientServerListReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ClientServerListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 AccountID = 1;
  if (this->accountid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->accountid(), target);
  }

  // int32 Channel = 2;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // string ClientVersion = 3;
  if (this->clientversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientversion().data(), static_cast<int>(this->clientversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ClientServerListReq.ClientVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->clientversion(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientServerListReq)
  return target;
}

size_t ClientServerListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientServerListReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ClientVersion = 3;
  if (this->clientversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientversion());
  }

  // uint64 AccountID = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->accountid());
  }

  // int32 Channel = 2;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientServerListReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientServerListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientServerListReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientServerListReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientServerListReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientServerListReq)
    MergeFrom(*source);
  }
}

void ClientServerListReq::MergeFrom(const ClientServerListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientServerListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientversion().size() > 0) {

    clientversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientversion_);
  }
  if (from.accountid() != 0) {
    set_accountid(from.accountid());
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
}

void ClientServerListReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientServerListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientServerListReq::CopyFrom(const ClientServerListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientServerListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientServerListReq::IsInitialized() const {
  return true;
}

void ClientServerListReq::Swap(ClientServerListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientServerListReq::InternalSwap(ClientServerListReq* other) {
  using std::swap;
  clientversion_.Swap(&other->clientversion_);
  swap(accountid_, other->accountid_);
  swap(channel_, other->channel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientServerListReq::GetMetadata() const {
  protobuf_Msg_5fLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Msg_5fLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientServerNode::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientServerNode::kSvrIDFieldNumber;
const int ClientServerNode::kSvrNameFieldNumber;
const int ClientServerNode::kSvrStateFieldNumber;
const int ClientServerNode::kSvrFlagFieldNumber;
const int ClientServerNode::kSvrOpenTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientServerNode::ClientServerNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Msg_5fLogin_2eproto::InitDefaultsClientServerNode();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientServerNode)
}
ClientServerNode::ClientServerNode(const ClientServerNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  svrname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.svrname().size() > 0) {
    svrname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.svrname_);
  }
  ::memcpy(&svrid_, &from.svrid_,
    static_cast<size_t>(reinterpret_cast<char*>(&svropentime_) -
    reinterpret_cast<char*>(&svrid_)) + sizeof(svropentime_));
  // @@protoc_insertion_point(copy_constructor:ClientServerNode)
}

void ClientServerNode::SharedCtor() {
  svrname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&svrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&svropentime_) -
      reinterpret_cast<char*>(&svrid_)) + sizeof(svropentime_));
  _cached_size_ = 0;
}

ClientServerNode::~ClientServerNode() {
  // @@protoc_insertion_point(destructor:ClientServerNode)
  SharedDtor();
}

void ClientServerNode::SharedDtor() {
  svrname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClientServerNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientServerNode::descriptor() {
  ::protobuf_Msg_5fLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Msg_5fLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientServerNode& ClientServerNode::default_instance() {
  ::protobuf_Msg_5fLogin_2eproto::InitDefaultsClientServerNode();
  return *internal_default_instance();
}

ClientServerNode* ClientServerNode::New(::google::protobuf::Arena* arena) const {
  ClientServerNode* n = new ClientServerNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientServerNode::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientServerNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  svrname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&svrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&svropentime_) -
      reinterpret_cast<char*>(&svrid_)) + sizeof(svropentime_));
  _internal_metadata_.Clear();
}

bool ClientServerNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientServerNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 SvrID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svrid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string SvrName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svrname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->svrname().data(), static_cast<int>(this->svrname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ClientServerNode.SvrName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 SvrState = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svrstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 SvrFlag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svrflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 SvrOpenTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svropentime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientServerNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientServerNode)
  return false;
#undef DO_
}

void ClientServerNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientServerNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 SvrID = 1;
  if (this->svrid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->svrid(), output);
  }

  // string SvrName = 2;
  if (this->svrname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->svrname().data(), static_cast<int>(this->svrname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ClientServerNode.SvrName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->svrname(), output);
  }

  // int32 SvrState = 3;
  if (this->svrstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->svrstate(), output);
  }

  // int32 SvrFlag = 4;
  if (this->svrflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->svrflag(), output);
  }

  // int32 SvrOpenTime = 5;
  if (this->svropentime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->svropentime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientServerNode)
}

::google::protobuf::uint8* ClientServerNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ClientServerNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 SvrID = 1;
  if (this->svrid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->svrid(), target);
  }

  // string SvrName = 2;
  if (this->svrname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->svrname().data(), static_cast<int>(this->svrname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ClientServerNode.SvrName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->svrname(), target);
  }

  // int32 SvrState = 3;
  if (this->svrstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->svrstate(), target);
  }

  // int32 SvrFlag = 4;
  if (this->svrflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->svrflag(), target);
  }

  // int32 SvrOpenTime = 5;
  if (this->svropentime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->svropentime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientServerNode)
  return target;
}

size_t ClientServerNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientServerNode)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string SvrName = 2;
  if (this->svrname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->svrname());
  }

  // int32 SvrID = 1;
  if (this->svrid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->svrid());
  }

  // int32 SvrState = 3;
  if (this->svrstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->svrstate());
  }

  // int32 SvrFlag = 4;
  if (this->svrflag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->svrflag());
  }

  // int32 SvrOpenTime = 5;
  if (this->svropentime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->svropentime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientServerNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientServerNode)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientServerNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientServerNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientServerNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientServerNode)
    MergeFrom(*source);
  }
}

void ClientServerNode::MergeFrom(const ClientServerNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientServerNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.svrname().size() > 0) {

    svrname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.svrname_);
  }
  if (from.svrid() != 0) {
    set_svrid(from.svrid());
  }
  if (from.svrstate() != 0) {
    set_svrstate(from.svrstate());
  }
  if (from.svrflag() != 0) {
    set_svrflag(from.svrflag());
  }
  if (from.svropentime() != 0) {
    set_svropentime(from.svropentime());
  }
}

void ClientServerNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientServerNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientServerNode::CopyFrom(const ClientServerNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientServerNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientServerNode::IsInitialized() const {
  return true;
}

void ClientServerNode::Swap(ClientServerNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientServerNode::InternalSwap(ClientServerNode* other) {
  using std::swap;
  svrname_.Swap(&other->svrname_);
  swap(svrid_, other->svrid_);
  swap(svrstate_, other->svrstate_);
  swap(svrflag_, other->svrflag_);
  swap(svropentime_, other->svropentime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientServerNode::GetMetadata() const {
  protobuf_Msg_5fLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Msg_5fLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientServerListAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientServerListAck::kRetCodeFieldNumber;
const int ClientServerListAck::kSvrNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientServerListAck::ClientServerListAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Msg_5fLogin_2eproto::InitDefaultsClientServerListAck();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientServerListAck)
}
ClientServerListAck::ClientServerListAck(const ClientServerListAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      svrnode_(from.svrnode_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:ClientServerListAck)
}

void ClientServerListAck::SharedCtor() {
  retcode_ = 0u;
  _cached_size_ = 0;
}

ClientServerListAck::~ClientServerListAck() {
  // @@protoc_insertion_point(destructor:ClientServerListAck)
  SharedDtor();
}

void ClientServerListAck::SharedDtor() {
}

void ClientServerListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientServerListAck::descriptor() {
  ::protobuf_Msg_5fLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Msg_5fLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientServerListAck& ClientServerListAck::default_instance() {
  ::protobuf_Msg_5fLogin_2eproto::InitDefaultsClientServerListAck();
  return *internal_default_instance();
}

ClientServerListAck* ClientServerListAck::New(::google::protobuf::Arena* arena) const {
  ClientServerListAck* n = new ClientServerListAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientServerListAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientServerListAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  svrnode_.Clear();
  retcode_ = 0u;
  _internal_metadata_.Clear();
}

bool ClientServerListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientServerListAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 RetCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ClientServerNode SvrNode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_svrnode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientServerListAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientServerListAck)
  return false;
#undef DO_
}

void ClientServerListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientServerListAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // repeated .ClientServerNode SvrNode = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->svrnode_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->svrnode(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientServerListAck)
}

::google::protobuf::uint8* ClientServerListAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ClientServerListAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // repeated .ClientServerNode SvrNode = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->svrnode_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->svrnode(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientServerListAck)
  return target;
}

size_t ClientServerListAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientServerListAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ClientServerNode SvrNode = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->svrnode_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svrnode(static_cast<int>(i)));
    }
  }

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientServerListAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientServerListAck)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientServerListAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientServerListAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientServerListAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientServerListAck)
    MergeFrom(*source);
  }
}

void ClientServerListAck::MergeFrom(const ClientServerListAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientServerListAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  svrnode_.MergeFrom(from.svrnode_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void ClientServerListAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientServerListAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientServerListAck::CopyFrom(const ClientServerListAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientServerListAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientServerListAck::IsInitialized() const {
  return true;
}

void ClientServerListAck::Swap(ClientServerListAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientServerListAck::InternalSwap(ClientServerListAck* other) {
  using std::swap;
  svrnode_.InternalSwap(&other->svrnode_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientServerListAck::GetMetadata() const {
  protobuf_Msg_5fLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Msg_5fLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SelectServerReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectServerReq::kServerIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectServerReq::SelectServerReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Msg_5fLogin_2eproto::InitDefaultsSelectServerReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SelectServerReq)
}
SelectServerReq::SelectServerReq(const SelectServerReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serverid_ = from.serverid_;
  // @@protoc_insertion_point(copy_constructor:SelectServerReq)
}

void SelectServerReq::SharedCtor() {
  serverid_ = 0;
  _cached_size_ = 0;
}

SelectServerReq::~SelectServerReq() {
  // @@protoc_insertion_point(destructor:SelectServerReq)
  SharedDtor();
}

void SelectServerReq::SharedDtor() {
}

void SelectServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectServerReq::descriptor() {
  ::protobuf_Msg_5fLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Msg_5fLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SelectServerReq& SelectServerReq::default_instance() {
  ::protobuf_Msg_5fLogin_2eproto::InitDefaultsSelectServerReq();
  return *internal_default_instance();
}

SelectServerReq* SelectServerReq::New(::google::protobuf::Arena* arena) const {
  SelectServerReq* n = new SelectServerReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelectServerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SelectServerReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serverid_ = 0;
  _internal_metadata_.Clear();
}

bool SelectServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SelectServerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ServerID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SelectServerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SelectServerReq)
  return false;
#undef DO_
}

void SelectServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SelectServerReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ServerID = 1;
  if (this->serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SelectServerReq)
}

::google::protobuf::uint8* SelectServerReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SelectServerReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ServerID = 1;
  if (this->serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SelectServerReq)
  return target;
}

size_t SelectServerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SelectServerReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 ServerID = 1;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serverid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectServerReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SelectServerReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectServerReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectServerReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SelectServerReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SelectServerReq)
    MergeFrom(*source);
  }
}

void SelectServerReq::MergeFrom(const SelectServerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SelectServerReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serverid() != 0) {
    set_serverid(from.serverid());
  }
}

void SelectServerReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SelectServerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectServerReq::CopyFrom(const SelectServerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SelectServerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectServerReq::IsInitialized() const {
  return true;
}

void SelectServerReq::Swap(SelectServerReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelectServerReq::InternalSwap(SelectServerReq* other) {
  using std::swap;
  swap(serverid_, other->serverid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelectServerReq::GetMetadata() const {
  protobuf_Msg_5fLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Msg_5fLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SelectServerAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectServerAck::kRetCodeFieldNumber;
const int SelectServerAck::kServerIDFieldNumber;
const int SelectServerAck::kServerAddrFieldNumber;
const int SelectServerAck::kServerPortFieldNumber;
const int SelectServerAck::kLoginCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectServerAck::SelectServerAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Msg_5fLogin_2eproto::InitDefaultsSelectServerAck();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SelectServerAck)
}
SelectServerAck::SelectServerAck(const SelectServerAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serveraddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serveraddr().size() > 0) {
    serveraddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serveraddr_);
  }
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&logincode_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(logincode_));
  // @@protoc_insertion_point(copy_constructor:SelectServerAck)
}

void SelectServerAck::SharedCtor() {
  serveraddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logincode_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(logincode_));
  _cached_size_ = 0;
}

SelectServerAck::~SelectServerAck() {
  // @@protoc_insertion_point(destructor:SelectServerAck)
  SharedDtor();
}

void SelectServerAck::SharedDtor() {
  serveraddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SelectServerAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectServerAck::descriptor() {
  ::protobuf_Msg_5fLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Msg_5fLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SelectServerAck& SelectServerAck::default_instance() {
  ::protobuf_Msg_5fLogin_2eproto::InitDefaultsSelectServerAck();
  return *internal_default_instance();
}

SelectServerAck* SelectServerAck::New(::google::protobuf::Arena* arena) const {
  SelectServerAck* n = new SelectServerAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelectServerAck::Clear() {
// @@protoc_insertion_point(message_clear_start:SelectServerAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serveraddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logincode_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(logincode_));
  _internal_metadata_.Clear();
}

bool SelectServerAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SelectServerAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 RetCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ServerID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ServerAddr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serveraddr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serveraddr().data(), static_cast<int>(this->serveraddr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SelectServerAck.ServerAddr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ServerPort = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 LoginCode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logincode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SelectServerAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SelectServerAck)
  return false;
#undef DO_
}

void SelectServerAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SelectServerAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // int32 ServerID = 2;
  if (this->serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serverid(), output);
  }

  // string ServerAddr = 3;
  if (this->serveraddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serveraddr().data(), static_cast<int>(this->serveraddr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SelectServerAck.ServerAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->serveraddr(), output);
  }

  // int32 ServerPort = 4;
  if (this->serverport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->serverport(), output);
  }

  // int32 LoginCode = 5;
  if (this->logincode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->logincode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SelectServerAck)
}

::google::protobuf::uint8* SelectServerAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SelectServerAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // int32 ServerID = 2;
  if (this->serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serverid(), target);
  }

  // string ServerAddr = 3;
  if (this->serveraddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serveraddr().data(), static_cast<int>(this->serveraddr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SelectServerAck.ServerAddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->serveraddr(), target);
  }

  // int32 ServerPort = 4;
  if (this->serverport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->serverport(), target);
  }

  // int32 LoginCode = 5;
  if (this->logincode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->logincode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SelectServerAck)
  return target;
}

size_t SelectServerAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SelectServerAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ServerAddr = 3;
  if (this->serveraddr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serveraddr());
  }

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->retcode());
  }

  // int32 ServerID = 2;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serverid());
  }

  // int32 ServerPort = 4;
  if (this->serverport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serverport());
  }

  // int32 LoginCode = 5;
  if (this->logincode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->logincode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectServerAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SelectServerAck)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectServerAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectServerAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SelectServerAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SelectServerAck)
    MergeFrom(*source);
  }
}

void SelectServerAck::MergeFrom(const SelectServerAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SelectServerAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serveraddr().size() > 0) {

    serveraddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serveraddr_);
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.serverid() != 0) {
    set_serverid(from.serverid());
  }
  if (from.serverport() != 0) {
    set_serverport(from.serverport());
  }
  if (from.logincode() != 0) {
    set_logincode(from.logincode());
  }
}

void SelectServerAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SelectServerAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectServerAck::CopyFrom(const SelectServerAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SelectServerAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectServerAck::IsInitialized() const {
  return true;
}

void SelectServerAck::Swap(SelectServerAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelectServerAck::InternalSwap(SelectServerAck* other) {
  using std::swap;
  serveraddr_.Swap(&other->serveraddr_);
  swap(retcode_, other->retcode_);
  swap(serverid_, other->serverid_);
  swap(serverport_, other->serverport_);
  swap(logincode_, other->logincode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelectServerAck::GetMetadata() const {
  protobuf_Msg_5fLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Msg_5fLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LogicRegToLoginReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogicRegToLoginReq::kServerIDFieldNumber;
const int LogicRegToLoginReq::kServerNameFieldNumber;
const int LogicRegToLoginReq::kServerIpFieldNumber;
const int LogicRegToLoginReq::kServerPortFieldNumber;
const int LogicRegToLoginReq::kHttpPortFieldNumber;
const int LogicRegToLoginReq::kWatchPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogicRegToLoginReq::LogicRegToLoginReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Msg_5fLogin_2eproto::InitDefaultsLogicRegToLoginReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogicRegToLoginReq)
}
LogicRegToLoginReq::LogicRegToLoginReq(const LogicRegToLoginReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  servername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.servername().size() > 0) {
    servername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servername_);
  }
  serverip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serverip().size() > 0) {
    serverip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverip_);
  }
  ::memcpy(&serverid_, &from.serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&watchport_) -
    reinterpret_cast<char*>(&serverid_)) + sizeof(watchport_));
  // @@protoc_insertion_point(copy_constructor:LogicRegToLoginReq)
}

void LogicRegToLoginReq::SharedCtor() {
  servername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&watchport_) -
      reinterpret_cast<char*>(&serverid_)) + sizeof(watchport_));
  _cached_size_ = 0;
}

LogicRegToLoginReq::~LogicRegToLoginReq() {
  // @@protoc_insertion_point(destructor:LogicRegToLoginReq)
  SharedDtor();
}

void LogicRegToLoginReq::SharedDtor() {
  servername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogicRegToLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicRegToLoginReq::descriptor() {
  ::protobuf_Msg_5fLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Msg_5fLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogicRegToLoginReq& LogicRegToLoginReq::default_instance() {
  ::protobuf_Msg_5fLogin_2eproto::InitDefaultsLogicRegToLoginReq();
  return *internal_default_instance();
}

LogicRegToLoginReq* LogicRegToLoginReq::New(::google::protobuf::Arena* arena) const {
  LogicRegToLoginReq* n = new LogicRegToLoginReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogicRegToLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicRegToLoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&watchport_) -
      reinterpret_cast<char*>(&serverid_)) + sizeof(watchport_));
  _internal_metadata_.Clear();
}

bool LogicRegToLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogicRegToLoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ServerID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ServerName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->servername().data(), static_cast<int>(this->servername().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LogicRegToLoginReq.ServerName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ServerIp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serverip().data(), static_cast<int>(this->serverip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LogicRegToLoginReq.ServerIp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ServerPort = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 HttpPort = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &httpport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 WatchPort = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &watchport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogicRegToLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogicRegToLoginReq)
  return false;
#undef DO_
}

void LogicRegToLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogicRegToLoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ServerID = 1;
  if (this->serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverid(), output);
  }

  // string ServerName = 2;
  if (this->servername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servername().data(), static_cast<int>(this->servername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LogicRegToLoginReq.ServerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->servername(), output);
  }

  // string ServerIp = 3;
  if (this->serverip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverip().data(), static_cast<int>(this->serverip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LogicRegToLoginReq.ServerIp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->serverip(), output);
  }

  // int32 ServerPort = 4;
  if (this->serverport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->serverport(), output);
  }

  // int32 HttpPort = 5;
  if (this->httpport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->httpport(), output);
  }

  // int32 WatchPort = 6;
  if (this->watchport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->watchport(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:LogicRegToLoginReq)
}

::google::protobuf::uint8* LogicRegToLoginReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LogicRegToLoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ServerID = 1;
  if (this->serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverid(), target);
  }

  // string ServerName = 2;
  if (this->servername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servername().data(), static_cast<int>(this->servername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LogicRegToLoginReq.ServerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->servername(), target);
  }

  // string ServerIp = 3;
  if (this->serverip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverip().data(), static_cast<int>(this->serverip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LogicRegToLoginReq.ServerIp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->serverip(), target);
  }

  // int32 ServerPort = 4;
  if (this->serverport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->serverport(), target);
  }

  // int32 HttpPort = 5;
  if (this->httpport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->httpport(), target);
  }

  // int32 WatchPort = 6;
  if (this->watchport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->watchport(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicRegToLoginReq)
  return target;
}

size_t LogicRegToLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicRegToLoginReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ServerName = 2;
  if (this->servername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servername());
  }

  // string ServerIp = 3;
  if (this->serverip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverip());
  }

  // int32 ServerID = 1;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serverid());
  }

  // int32 ServerPort = 4;
  if (this->serverport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serverport());
  }

  // int32 HttpPort = 5;
  if (this->httpport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->httpport());
  }

  // int32 WatchPort = 6;
  if (this->watchport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->watchport());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicRegToLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogicRegToLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicRegToLoginReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogicRegToLoginReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogicRegToLoginReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogicRegToLoginReq)
    MergeFrom(*source);
  }
}

void LogicRegToLoginReq::MergeFrom(const LogicRegToLoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogicRegToLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servername().size() > 0) {

    servername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servername_);
  }
  if (from.serverip().size() > 0) {

    serverip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverip_);
  }
  if (from.serverid() != 0) {
    set_serverid(from.serverid());
  }
  if (from.serverport() != 0) {
    set_serverport(from.serverport());
  }
  if (from.httpport() != 0) {
    set_httpport(from.httpport());
  }
  if (from.watchport() != 0) {
    set_watchport(from.watchport());
  }
}

void LogicRegToLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogicRegToLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicRegToLoginReq::CopyFrom(const LogicRegToLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicRegToLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicRegToLoginReq::IsInitialized() const {
  return true;
}

void LogicRegToLoginReq::Swap(LogicRegToLoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogicRegToLoginReq::InternalSwap(LogicRegToLoginReq* other) {
  using std::swap;
  servername_.Swap(&other->servername_);
  serverip_.Swap(&other->serverip_);
  swap(serverid_, other->serverid_);
  swap(serverport_, other->serverport_);
  swap(httpport_, other->httpport_);
  swap(watchport_, other->watchport_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogicRegToLoginReq::GetMetadata() const {
  protobuf_Msg_5fLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Msg_5fLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LogicRegToLoginAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogicRegToLoginAck::kRetCodeFieldNumber;
const int LogicRegToLoginAck::kNewSvrNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogicRegToLoginAck::LogicRegToLoginAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Msg_5fLogin_2eproto::InitDefaultsLogicRegToLoginAck();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogicRegToLoginAck)
}
LogicRegToLoginAck::LogicRegToLoginAck(const LogicRegToLoginAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  newsvrname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.newsvrname().size() > 0) {
    newsvrname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.newsvrname_);
  }
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:LogicRegToLoginAck)
}

void LogicRegToLoginAck::SharedCtor() {
  newsvrname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  retcode_ = 0u;
  _cached_size_ = 0;
}

LogicRegToLoginAck::~LogicRegToLoginAck() {
  // @@protoc_insertion_point(destructor:LogicRegToLoginAck)
  SharedDtor();
}

void LogicRegToLoginAck::SharedDtor() {
  newsvrname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogicRegToLoginAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicRegToLoginAck::descriptor() {
  ::protobuf_Msg_5fLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Msg_5fLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogicRegToLoginAck& LogicRegToLoginAck::default_instance() {
  ::protobuf_Msg_5fLogin_2eproto::InitDefaultsLogicRegToLoginAck();
  return *internal_default_instance();
}

LogicRegToLoginAck* LogicRegToLoginAck::New(::google::protobuf::Arena* arena) const {
  LogicRegToLoginAck* n = new LogicRegToLoginAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogicRegToLoginAck::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicRegToLoginAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  newsvrname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  retcode_ = 0u;
  _internal_metadata_.Clear();
}

bool LogicRegToLoginAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogicRegToLoginAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 RetCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string NewSvrName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newsvrname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->newsvrname().data(), static_cast<int>(this->newsvrname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LogicRegToLoginAck.NewSvrName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogicRegToLoginAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogicRegToLoginAck)
  return false;
#undef DO_
}

void LogicRegToLoginAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogicRegToLoginAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // string NewSvrName = 2;
  if (this->newsvrname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->newsvrname().data(), static_cast<int>(this->newsvrname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LogicRegToLoginAck.NewSvrName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->newsvrname(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:LogicRegToLoginAck)
}

::google::protobuf::uint8* LogicRegToLoginAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LogicRegToLoginAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // string NewSvrName = 2;
  if (this->newsvrname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->newsvrname().data(), static_cast<int>(this->newsvrname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LogicRegToLoginAck.NewSvrName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->newsvrname(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicRegToLoginAck)
  return target;
}

size_t LogicRegToLoginAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicRegToLoginAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string NewSvrName = 2;
  if (this->newsvrname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->newsvrname());
  }

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicRegToLoginAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogicRegToLoginAck)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicRegToLoginAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogicRegToLoginAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogicRegToLoginAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogicRegToLoginAck)
    MergeFrom(*source);
  }
}

void LogicRegToLoginAck::MergeFrom(const LogicRegToLoginAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogicRegToLoginAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.newsvrname().size() > 0) {

    newsvrname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.newsvrname_);
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void LogicRegToLoginAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogicRegToLoginAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicRegToLoginAck::CopyFrom(const LogicRegToLoginAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicRegToLoginAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicRegToLoginAck::IsInitialized() const {
  return true;
}

void LogicRegToLoginAck::Swap(LogicRegToLoginAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogicRegToLoginAck::InternalSwap(LogicRegToLoginAck* other) {
  using std::swap;
  newsvrname_.Swap(&other->newsvrname_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogicRegToLoginAck::GetMetadata() const {
  protobuf_Msg_5fLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Msg_5fLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
