// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Msg_AI.proto

#ifndef PROTOBUF_Msg_5fAI_2eproto__INCLUDED
#define PROTOBUF_Msg_5fAI_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_Msg_5fAI_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSvrRegToSvrReqImpl();
void InitDefaultsSvrRegToSvrReq();
void InitDefaultsSvrRegToSvrAckImpl();
void InitDefaultsSvrRegToSvrAck();
inline void InitDefaults() {
  InitDefaultsSvrRegToSvrReq();
  InitDefaultsSvrRegToSvrAck();
}
}  // namespace protobuf_Msg_5fAI_2eproto
class SvrRegToSvrAck;
class SvrRegToSvrAckDefaultTypeInternal;
extern SvrRegToSvrAckDefaultTypeInternal _SvrRegToSvrAck_default_instance_;
class SvrRegToSvrReq;
class SvrRegToSvrReqDefaultTypeInternal;
extern SvrRegToSvrReqDefaultTypeInternal _SvrRegToSvrReq_default_instance_;

// ===================================================================

class SvrRegToSvrReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrRegToSvrReq) */ {
 public:
  SvrRegToSvrReq();
  virtual ~SvrRegToSvrReq();

  SvrRegToSvrReq(const SvrRegToSvrReq& from);

  inline SvrRegToSvrReq& operator=(const SvrRegToSvrReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SvrRegToSvrReq(SvrRegToSvrReq&& from) noexcept
    : SvrRegToSvrReq() {
    *this = ::std::move(from);
  }

  inline SvrRegToSvrReq& operator=(SvrRegToSvrReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SvrRegToSvrReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SvrRegToSvrReq* internal_default_instance() {
    return reinterpret_cast<const SvrRegToSvrReq*>(
               &_SvrRegToSvrReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SvrRegToSvrReq* other);
  friend void swap(SvrRegToSvrReq& a, SvrRegToSvrReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SvrRegToSvrReq* New() const PROTOBUF_FINAL { return New(NULL); }

  SvrRegToSvrReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SvrRegToSvrReq& from);
  void MergeFrom(const SvrRegToSvrReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SvrRegToSvrReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ServerName = 2;
  void clear_servername();
  static const int kServerNameFieldNumber = 2;
  const ::std::string& servername() const;
  void set_servername(const ::std::string& value);
  #if LANG_CXX11
  void set_servername(::std::string&& value);
  #endif
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  ::std::string* mutable_servername();
  ::std::string* release_servername();
  void set_allocated_servername(::std::string* servername);

  // string ServerIp = 3;
  void clear_serverip();
  static const int kServerIpFieldNumber = 3;
  const ::std::string& serverip() const;
  void set_serverip(const ::std::string& value);
  #if LANG_CXX11
  void set_serverip(::std::string&& value);
  #endif
  void set_serverip(const char* value);
  void set_serverip(const char* value, size_t size);
  ::std::string* mutable_serverip();
  ::std::string* release_serverip();
  void set_allocated_serverip(::std::string* serverip);

  // int32 ServerID = 1;
  void clear_serverid();
  static const int kServerIDFieldNumber = 1;
  ::google::protobuf::int32 serverid() const;
  void set_serverid(::google::protobuf::int32 value);

  // int32 ServerPort = 4;
  void clear_serverport();
  static const int kServerPortFieldNumber = 4;
  ::google::protobuf::int32 serverport() const;
  void set_serverport(::google::protobuf::int32 value);

  // int32 HttpPort = 5;
  void clear_httpport();
  static const int kHttpPortFieldNumber = 5;
  ::google::protobuf::int32 httpport() const;
  void set_httpport(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrRegToSvrReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr servername_;
  ::google::protobuf::internal::ArenaStringPtr serverip_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int32 serverport_;
  ::google::protobuf::int32 httpport_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_5fAI_2eproto::TableStruct;
  friend void ::protobuf_Msg_5fAI_2eproto::InitDefaultsSvrRegToSvrReqImpl();
};
// -------------------------------------------------------------------

class SvrRegToSvrAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SvrRegToSvrAck) */ {
 public:
  SvrRegToSvrAck();
  virtual ~SvrRegToSvrAck();

  SvrRegToSvrAck(const SvrRegToSvrAck& from);

  inline SvrRegToSvrAck& operator=(const SvrRegToSvrAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SvrRegToSvrAck(SvrRegToSvrAck&& from) noexcept
    : SvrRegToSvrAck() {
    *this = ::std::move(from);
  }

  inline SvrRegToSvrAck& operator=(SvrRegToSvrAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SvrRegToSvrAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SvrRegToSvrAck* internal_default_instance() {
    return reinterpret_cast<const SvrRegToSvrAck*>(
               &_SvrRegToSvrAck_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SvrRegToSvrAck* other);
  friend void swap(SvrRegToSvrAck& a, SvrRegToSvrAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SvrRegToSvrAck* New() const PROTOBUF_FINAL { return New(NULL); }

  SvrRegToSvrAck* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SvrRegToSvrAck& from);
  void MergeFrom(const SvrRegToSvrAck& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SvrRegToSvrAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string NewSvrName = 2;
  void clear_newsvrname();
  static const int kNewSvrNameFieldNumber = 2;
  const ::std::string& newsvrname() const;
  void set_newsvrname(const ::std::string& value);
  #if LANG_CXX11
  void set_newsvrname(::std::string&& value);
  #endif
  void set_newsvrname(const char* value);
  void set_newsvrname(const char* value, size_t size);
  ::std::string* mutable_newsvrname();
  ::std::string* release_newsvrname();
  void set_allocated_newsvrname(::std::string* newsvrname);

  // int32 RetCode = 1;
  void clear_retcode();
  static const int kRetCodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SvrRegToSvrAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr newsvrname_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct ::protobuf_Msg_5fAI_2eproto::TableStruct;
  friend void ::protobuf_Msg_5fAI_2eproto::InitDefaultsSvrRegToSvrAckImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SvrRegToSvrReq

// int32 ServerID = 1;
inline void SvrRegToSvrReq::clear_serverid() {
  serverid_ = 0;
}
inline ::google::protobuf::int32 SvrRegToSvrReq::serverid() const {
  // @@protoc_insertion_point(field_get:SvrRegToSvrReq.ServerID)
  return serverid_;
}
inline void SvrRegToSvrReq::set_serverid(::google::protobuf::int32 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:SvrRegToSvrReq.ServerID)
}

// string ServerName = 2;
inline void SvrRegToSvrReq::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SvrRegToSvrReq::servername() const {
  // @@protoc_insertion_point(field_get:SvrRegToSvrReq.ServerName)
  return servername_.GetNoArena();
}
inline void SvrRegToSvrReq::set_servername(const ::std::string& value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrRegToSvrReq.ServerName)
}
#if LANG_CXX11
inline void SvrRegToSvrReq::set_servername(::std::string&& value) {
  
  servername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrRegToSvrReq.ServerName)
}
#endif
inline void SvrRegToSvrReq::set_servername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrRegToSvrReq.ServerName)
}
inline void SvrRegToSvrReq::set_servername(const char* value, size_t size) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrRegToSvrReq.ServerName)
}
inline ::std::string* SvrRegToSvrReq::mutable_servername() {
  
  // @@protoc_insertion_point(field_mutable:SvrRegToSvrReq.ServerName)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SvrRegToSvrReq::release_servername() {
  // @@protoc_insertion_point(field_release:SvrRegToSvrReq.ServerName)
  
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SvrRegToSvrReq::set_allocated_servername(::std::string* servername) {
  if (servername != NULL) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:SvrRegToSvrReq.ServerName)
}

// string ServerIp = 3;
inline void SvrRegToSvrReq::clear_serverip() {
  serverip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SvrRegToSvrReq::serverip() const {
  // @@protoc_insertion_point(field_get:SvrRegToSvrReq.ServerIp)
  return serverip_.GetNoArena();
}
inline void SvrRegToSvrReq::set_serverip(const ::std::string& value) {
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrRegToSvrReq.ServerIp)
}
#if LANG_CXX11
inline void SvrRegToSvrReq::set_serverip(::std::string&& value) {
  
  serverip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrRegToSvrReq.ServerIp)
}
#endif
inline void SvrRegToSvrReq::set_serverip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrRegToSvrReq.ServerIp)
}
inline void SvrRegToSvrReq::set_serverip(const char* value, size_t size) {
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrRegToSvrReq.ServerIp)
}
inline ::std::string* SvrRegToSvrReq::mutable_serverip() {
  
  // @@protoc_insertion_point(field_mutable:SvrRegToSvrReq.ServerIp)
  return serverip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SvrRegToSvrReq::release_serverip() {
  // @@protoc_insertion_point(field_release:SvrRegToSvrReq.ServerIp)
  
  return serverip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SvrRegToSvrReq::set_allocated_serverip(::std::string* serverip) {
  if (serverip != NULL) {
    
  } else {
    
  }
  serverip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverip);
  // @@protoc_insertion_point(field_set_allocated:SvrRegToSvrReq.ServerIp)
}

// int32 ServerPort = 4;
inline void SvrRegToSvrReq::clear_serverport() {
  serverport_ = 0;
}
inline ::google::protobuf::int32 SvrRegToSvrReq::serverport() const {
  // @@protoc_insertion_point(field_get:SvrRegToSvrReq.ServerPort)
  return serverport_;
}
inline void SvrRegToSvrReq::set_serverport(::google::protobuf::int32 value) {
  
  serverport_ = value;
  // @@protoc_insertion_point(field_set:SvrRegToSvrReq.ServerPort)
}

// int32 HttpPort = 5;
inline void SvrRegToSvrReq::clear_httpport() {
  httpport_ = 0;
}
inline ::google::protobuf::int32 SvrRegToSvrReq::httpport() const {
  // @@protoc_insertion_point(field_get:SvrRegToSvrReq.HttpPort)
  return httpport_;
}
inline void SvrRegToSvrReq::set_httpport(::google::protobuf::int32 value) {
  
  httpport_ = value;
  // @@protoc_insertion_point(field_set:SvrRegToSvrReq.HttpPort)
}

// -------------------------------------------------------------------

// SvrRegToSvrAck

// int32 RetCode = 1;
inline void SvrRegToSvrAck::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 SvrRegToSvrAck::retcode() const {
  // @@protoc_insertion_point(field_get:SvrRegToSvrAck.RetCode)
  return retcode_;
}
inline void SvrRegToSvrAck::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:SvrRegToSvrAck.RetCode)
}

// string NewSvrName = 2;
inline void SvrRegToSvrAck::clear_newsvrname() {
  newsvrname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SvrRegToSvrAck::newsvrname() const {
  // @@protoc_insertion_point(field_get:SvrRegToSvrAck.NewSvrName)
  return newsvrname_.GetNoArena();
}
inline void SvrRegToSvrAck::set_newsvrname(const ::std::string& value) {
  
  newsvrname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SvrRegToSvrAck.NewSvrName)
}
#if LANG_CXX11
inline void SvrRegToSvrAck::set_newsvrname(::std::string&& value) {
  
  newsvrname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SvrRegToSvrAck.NewSvrName)
}
#endif
inline void SvrRegToSvrAck::set_newsvrname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  newsvrname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SvrRegToSvrAck.NewSvrName)
}
inline void SvrRegToSvrAck::set_newsvrname(const char* value, size_t size) {
  
  newsvrname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SvrRegToSvrAck.NewSvrName)
}
inline ::std::string* SvrRegToSvrAck::mutable_newsvrname() {
  
  // @@protoc_insertion_point(field_mutable:SvrRegToSvrAck.NewSvrName)
  return newsvrname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SvrRegToSvrAck::release_newsvrname() {
  // @@protoc_insertion_point(field_release:SvrRegToSvrAck.NewSvrName)
  
  return newsvrname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SvrRegToSvrAck::set_allocated_newsvrname(::std::string* newsvrname) {
  if (newsvrname != NULL) {
    
  } else {
    
  }
  newsvrname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), newsvrname);
  // @@protoc_insertion_point(field_set_allocated:SvrRegToSvrAck.NewSvrName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Msg_5fAI_2eproto__INCLUDED
