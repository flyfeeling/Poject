#ifndef Test_18_h__
#define Test_18_h__
/*
给定一个 n × n 的二维矩阵表示一个图像。
将图像顺时针旋转 90 度。
说明：
你必须在原地旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像。
示例 1:
	给定 matrix =
	[
	  [1,2,3],
	  [4,5,6],
	  [7,8,9]
	],

	原地旋转输入矩阵，使其变为:
	[
	  [7,4,1],
	  [8,5,2],
	  [9,6,3]
	]
示例 2:
	给定 matrix =
	[
	  [ 5, 1, 9,11],
	  [ 2, 4, 8,10],
	  [13, 3, 6, 7],
	  [15,14,12,16]
	],

	原地旋转输入矩阵，使其变为:
	[
	  [15,13, 2, 5],
	  [14, 3, 4, 1],
	  [12, 6, 8, 9],
	  [16, 7,10,11]
	]
示例3：
matrix =
	[
	  [1,  2,  3,  4,  5],
	  [6,  7,  8,  9,  10],
	  [11, 12, 13, 14, 15],
	  [16, 17, 18, 19, 20],
	  [21, 22, 23, 24, 25]
	],
	原地旋转输入矩阵，使其变为:
	[
	  [21, 16, 11, 6,  1],
	  [22, 17, 12, 7,  2],
	  [23, 18, 13, 8,  3],
	  [24, 19, 14, 9,  4],
	  [25, 20, 15, 10, 5]
	]
*/
#include "Solution.h"
class Test_18 :public Solution 
{
public:
	void Excute() 
	{
		//vector<vector<int>> matrix = { {1,2,3,4},{5,6,7,8},{9,10,11,12} };
		vector<vector<int>> matrix = 
		{ 
			{1,2,3},
			{4,5,6},
			{7,8,9}
		};

		/*
				{1,4,7},
				{2,5,8},
				{3,6,9}
		*/
		rotate(matrix);
	}

	void rotate(vector<vector<int>>& matrix) 
	{
		int n = matrix.size();
		int i, j;
		for (i = 0; i < n; i++) 
		{
			for (j = i; j < n; j++) 
			{
				swap(matrix[i][j], matrix[j][i]);
			}
		}
		for (i = 0; i < n; ++i) 
		{
			for (j = 0; j < n / 2; ++j) 
			{
				swap(matrix[i][j], matrix[i][n - j - 1]);
			}
		}
	}
};
#endif // Test_18_h__
